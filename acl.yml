---
- hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - "vars/datas.yml"

  collections:
    - vmware.alb


  tasks:

    - name: get VS details
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: virtualservice
      register: virtualserviceResults
      when:
        - avi_ipaddrgroup is defined

    - name: Debug
      debug:
        msg: "{{ avi_api_context }}"

    - name: Create an ip group
      vmware.alb.avi_ipaddrgroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        prefixes: "{{ item.prefixes }}"
      register: ipaddrgroupOutputs
      loop: "{{ avi_ipaddrgroup }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_ipaddrgroup is defined
        - state is not defined

    - name: Debug
      debug:
        msg: "{{ avi_api_context }}"

    - name: Create a network security policy (to block clients represented by ip group)
      vmware.alb.avi_networksecuritypolicy:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        rules:
          - action: NETWORK_SECURITY_POLICY_ACTION_TYPE_DENY
            age: 0
            enable: true
            index: 1
            log: true
            match:
              client_ip:
                group_refs:
                  - "{{ lookup('avi', avi_credentials=avi_credentials, obj_name=item.avi_ipaddrgroup_ref, obj_type='ipaddrgroup').uuid }}"
                match_criteria: IS_IN
            name: Rule 1
      loop: "{{ avi_networksecuritypolicy }}"
      loop_control:
        label: "Creating a network security policy for {{ item.name }}"
      register: networksecuritypolicyOutputs
      when:
        - avi_networksecuritypolicy is defined
        - avi_ipaddrgroup is defined
        - state is not defined

    - name: Update VS with network_security_policy_ref for each parent VS (except for vs in the exclusion list)
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.name }}"
        network_security_policy_ref: "{{ networksecuritypolicyOutputs.results.0.obj.uuid }}"
      loop: "{{ virtualserviceResults.obj.results }}"
      loop_control:
        label: "Updating VS {{ item.name }} with network security policy"
      when:
        - item.name not in vsExclusionList
        - networksecuritypolicyOutputs is defined
        - state is not defined


    - name: get Network Security Policy Details
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: networksecuritypolicy
      register: networksecuritypolicyOutputs
      tags:
        - state is defined
      when:
        - avi_ipaddrgroup is defined

    - name: get VS
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: virtualservice
      register: virtualserviceResults
      when:
        - state is defined



    - name: Update VS without network_security_policy_ref for each parent VS (except for vs in the exclusion list)
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        timeout: 300
        http_method: patch
        path: '{{"virtualservice/" + item.uuid }}'
        data: {"delete":{"network_security_policy_ref":"{{ lookup('avi', avi_credentials=avi_credentials, obj_name=avi_networksecuritypolicy.0.name, obj_type='networksecuritypolicy').uuid }}"}}
      loop: "{{ virtualserviceResults.obj.results }}"
      loop_control:
        label: "Updating VS {{ item.name }} with network security policy"
      when:
        - state is defined
        - item.name not in vsExclusionList
        - lookup('avi', avi_credentials=avi_credentials, obj_name=avi_networksecuritypolicy.0.name, obj_type='networksecuritypolicy').uuid is defined

    - name: Delete a network security policy
      vmware.alb.avi_networksecuritypolicy:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        state: absent
        name: "{{ item.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
      loop: "{{ avi_networksecuritypolicy }}"
      loop_control:
        label: "Deleting a network security policies "
      when:
        - avi_networksecuritypolicy is defined
        - avi_ipaddrgroup is defined
        - state is defined


    - name: Delete an ip group
      vmware.alb.avi_ipaddrgroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        state: absent
      loop: "{{ avi_ipaddrgroup }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_ipaddrgroup is defined
        - state is defined