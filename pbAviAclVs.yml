---
- hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    # - "vars/creds.json"
    - "vars/datas.yml"

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Create an ip group
      avi_ipaddrgroup:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ item.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        prefixes: "{{ item.prefixes }}"
      register: ipaddrgroupOutputs
      loop: "{{ avi_ipaddrgroup }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_ipaddrgroup is defined
        - state is not defined
      tags:
        - ipAddressGroup
        - security

    - name: get VS details
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: virtualservice
      register: virtualserviceResults
      tags:
        - ipAddressGroup
        - security
      when:
        - avi_ipaddrgroup is defined

    - name: Create a network security policy (to block clients represented by ip group) for each VS (except for vs in the exclusion list)
      avi_networksecuritypolicy:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "security group - {{ item.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        rules:
        - action: NETWORK_SECURITY_POLICY_ACTION_TYPE_DENY
          age: 0
          enable: true
          index: 1
          log: true
          match:
            client_ip:
              group_refs:
              - "{{ ipaddrgroupOutputs.results.0.obj.uuid }}"
              match_criteria: IS_IN
          name: Rule 1
      loop: "{{ virtualserviceResults.obj.results }}"
      loop_control:
        label: "Creating a network security policy for {{ item.name }}"
      register: networksecuritypolicyOutputs
      when:
        - avi_ipaddrgroup is defined
        - state is not defined
        - item.name not in vsExclusionList
      tags:
        - ipAddressGroup
        - security


    # - name: Debug
    #   debug:
    #     msg: "{{ item.name }}"
    #   loop: "{{ virtualserviceResults.obj.results }}"
    #   tags:
    #     - ipAddressGroup
    #     - security
    #   when:
    #     - avi_ipaddrgroup is defined
    #     - state is not defined

    - name: Update VS with network_security_policy_ref (except for vs in the exclusion list)
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.0.name }}"
        network_security_policy_ref: "{{ item.1.obj.uuid }}"
      with_together:
        - "{{ virtualserviceResults.obj.results }}"
        - "{{ networksecuritypolicyOutputs.results }}"
      loop_control:
        label: "Updating VS {{ item.0.name }} with network security policy"
      when:
        - item.0.name not in vsExclusionList
        - state is not defined
      tags:
        - ipAddressGroup
        - security

    - name: get Network Security Policy Details
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: networksecuritypolicy
      register: networksecuritypolicyOutputs
      tags:
        - ipAddressGroup
        - security
        - state is defined
      when:
        - avi_ipaddrgroup is defined

    # - name: Debug
    #   debug:
    #     msg: "{{ item.name }}"
    #   loop: "{{ networksecuritypolicyOutputs.obj.results }}"
    #   tags:
    #     - debug

    - name: Disable a network security policy (to block clients represented by ip group) for each VS (except for vs in the exclusion list)
      avi_networksecuritypolicy:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "security group - {{ item.0.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        rules:
        - action: NETWORK_SECURITY_POLICY_ACTION_TYPE_DENY
          age: 0
          enable: false
          index: 1
          log: false
          match:
            client_ip:
              group_refs:
              - "{{ item.1.rules.0.match.client_ip.group_refs.0 }}"
              match_criteria: IS_IN
          name: Rule 1
      with_together:
        - "{{ virtualserviceResults.obj.results }}"
        - "{{ networksecuritypolicyOutputs.obj.results }}"
      loop_control:
        label: "Disabling Network Security for vs {{ item.0.name }}"
      register: networksecuritypolicyOutputs
      when:
        - avi_ipaddrgroup is defined
        - state is defined
        - item.0.name not in vsExclusionList
      tags:
        - ipAddressGroup
        - security


    # - name: Update VS without network_security_policy_ref (except for vs in the exclusion list)
    #   avi_virtualservice:
    #     avi_credentials: "{{ avi_credentials }}"
    #     api_version: "{{ avi_credentials.api_version }}"
    #     avi_api_update_method: patch
    #     avi_api_patch_op: add
    #     name: "{{ item.0.name }}"
    #     network_security_policy_ref: ""
    #   with_together:
    #     - "{{ virtualserviceResults.obj.results }}"
    #     - "{{ networksecuritypolicyOutputs.results }}"
    #   when:
    #     - item.0.name not in vsExclusionList
    #     - state is defined
    #   tags:
    #     - ipAddressGroup
    #     - security
    #
    # - name: Delete a network security policy
    #   avi_networksecuritypolicy:
    #     avi_credentials: "{{ avi_credentials }}"
    #     api_version: "{{ avi_credentials.api_version }}"
    #     name: "security group - {{ item.name }}"
    #     tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
    #     state: "{{ state }}"
    #     # rules:
    #     # - action: NETWORK_SECURITY_POLICY_ACTION_TYPE_DENY
    #     #   age: 0
    #     #   enable: true
    #     #   index: 1
    #     #   log: false
    #     #   match:
    #     #     client_ip:
    #     #       group_refs:
    #     #       - "{{ ipaddrgroupOutputs.results.0.obj.uuid }}"
    #     #       match_criteria: IS_IN
    #     #   name: Rule 1
    #   loop: "{{ virtualserviceResults.obj.results }}"
    #   register: networksecuritypolicyOutputs
    #   when:
    #     - avi_ipaddrgroup is defined
    #     - state is defined
    #     - item.name not in vsExclusionList
    #   tags:
    #     - ipAddressGroup
    #     - security
